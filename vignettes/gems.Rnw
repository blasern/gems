% ----------------------------------------------------------------------
% Author: Nello Blaser, ISPM, Uni Bern
%         <nblaser@ispm.unibe.ch>
% ----------------------------------------------------------------------
% Last modified: 19.01.2015
% ----------------------------------------------------------------------

%\VignetteIndexEntry{gems}

\documentclass[article,shortnames]{jss}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% almost as usual
\author{Nello Blaser\thanks{The first two authors listed on the paper contributed equally to the development of \pkg{gems}.}
\\University of Bern \And
  			Luisa Salazar Vizcaya$^{\ast}$ \\ University of Bern \AND
				Janne Estill \\ University of Bern \And
				Cindy Zahnd \\ University of Bern \And
				Bindu Kalesan \\ University of Bern \\ Columbia University \And
				Matthias Egger \\ University of Bern \\ University of Cape Town \AND
				Thomas Gsponer\thanks{The last two authors listed on the paper contributed equally to this manuscript.} \\ University of Bern \And
	      Olivia Keiser$^{\dagger}$  \\ University of Bern}
\title{\pkg{gems}: An \proglang{R} Package for Simulating 
	from Disease Progression Models}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Nello Blaser, Luisa Salazar, Janne Estill, Cindy Zahnd, Bindu Kalesan, Matthias Egger, Olivia Keiser, Thomas Gsponer} %% comma-separated

\Plaintitle{gems: An R Package for Simulating 
	from Disease Progression Models} %% without formatting
\Shorttitle{Generalized Multistate Simulation Model} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{
Mathematical models of disease progression predict disease outcomes and are useful epidemiological tools for planners and evaluators of health interventions. The \proglang{R} package \pkg{gems} is a tool that simulates disease progression in patients and predicts the effect  of different interventions on patient outcome. Disease progression is represented by a series of events (e.g., diagnosis, treatment and death), displayed in a directed acyclic graph. The vertices correspond to disease states and the directed edges represent events. The package \pkg{gems} allows simulations based on a generalized multistate model that can be described by a directed acyclic graph with continuous transition-specific hazard functions. The user can specify an arbitrary hazard function and its parameters. The model includes parameter uncertainty, does not need to be a Markov model, and may take the history of previous events into account. Applications are not limited to the medical field and extend to other areas where multistate simulation is of interest. We provide a technical explanation of the multistate models used by \pkg{gems}, explain the functions of \pkg{gems} and their arguments, and show a sample application.
}

\Keywords{Monte Carlo simulation, multistate model, \proglang{R}, survival analysis, prediction, compartmental model}
\Plainkeywords{Monte Carlo simulation, multistate model, R, survival analysis, prediction, compartmental model}
%\Plainkeywords{keywords, comma-separated, not capitalized, Java} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
\Volume{63}
\Issue{99}
\Month{January}
\Year{2015}
\Submitdate{2013-02-20}
\Acceptdate{2014-06-23}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  Nello Blaser\\
  Institute of Social and Preventive Medicine\\
  University of Bern\\
  3012 Bern, Switzerland\\
  E-mail: \email{nblaser@ispm.unibe.ch} \\[1mm]

  Luisa Salazar Vizcaya\\
  Institute of Social and Preventive Medicine\\
  University of Bern\\
  3012 Bern, Switzerland\\
  E-mail: \email{lsalazar@ispm.unibe.ch}
}
  
%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\usepackage{amsmath}
\usepackage{amsthm}
\usepackage[english]{babel}
\usepackage{amssymb}
\usepackage{bm}
\usepackage{verbatim} 
\usepackage{xcolor,pict2e}% to allow any radius
\usepackage{tikz}
\usetikzlibrary{shapes,arrows,calc,positioning,shapes.geometric,shapes.symbols,shapes.misc}
\graphicspath{{fig//}{sweave//}}

%% convenient commands
\newcommand{\given}{\,\vert\,}
\newcommand{\prob}[1]{\Prob\left[#1\right]}
\newcommand{\1}[1]{1_{\left\{#1\right\}}}
\newcommand{\rightgiven}{\,\right\vert\,}
\newcommand{\where}{\;\:\!\vert\;}

\newcommand{\N}{\mathbb{N}}
\newcommand{\R}{\mathbb{R}}	

\begin{document}

% Set global Sweave options:
% - use R engine;
% - do not create eps figures;
% - create pdf figures;
\SweaveOpts{engine=R,eps=FALSE,pdf=TRUE}
% Set further Sweave options:
% - use prefix.string as prefix for \includegraphics and include
%   the figure.
\SweaveOpts{prefix=TRUE,include=TRUE}
% This should handle the size of the figures.
\setkeys{Gin}{width=.9\textwidth}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and \code{} commands.

%--------------------------------------------------------------------------------
% Introduction
%--------------------------------------------------------------------------------
\section[Introduction]{Introduction}\label{intro}

We present a simulation algorithm and the \proglang{R} package \pkg{gems}  \citep{pkg:gems} for simulating from a multistate model with arbitrary transition-specific hazard functions.

% Disease progression models
In epidemiology, mathematical models of disease progression are useful for predicting disease outcomes and for planning and evaluating interventions \citep{Garnett2011}. Disease progression is often characterized by a series of events, such as diagnosis, treatment and death. From this characterization, disease progression can be displayed in a directed acyclic graph (DAG) \citep{Pearl2009}, where disease states are denoted by vertices and the directed edges connecting them correspond to the events.

% Non-exponential times
Traditional compartmental models of infectious diseases assume that transition times between the different stages of a disease are exponentially distributed \citep{Anderson1992}. The use of exponential transition times has the advantage that models can be formulated deterministically with ordinary differential equations. Exponential times can also be simulated using the Gillespie algorithm \citep{Gillespie1977}. However, the distribution of transition times between states is often not exponential \citep{Lloyd2001}. Although it is possible to divide states into substates, so that an exponential transition-specific hazard fits the data for those substates, this approach is inflexible. Typical model structures using non-exponential transition times are agent-based stochastic simulation models \citep{Estill2012, Phillips2011}. For instance one study used history-dependent Weibull distributed transition times to investigate the effect on HIV transmission of bringing patients lost to follow-up back into care \citep{Estill2014}. This study found that 116 tracing efforts were needed to prevent one new infection. Agent-based models usually apply to one specific disease and include a limited number of interventions. We are not aware of any agent-based model structure that can be applied simultaneously to different diseases and interventions. We therefore propose a more flexible simulation algorithm that can simulate from any DAG.

% gems
We developed a multistate model that allows disease progression to be monitored in a cohort of individual patients, and takes into account the history of previous events. The \proglang{R} package \pkg{gems} allows simulation from a directed acyclic multistate model with general transition-specific hazard functions. The package simplifies definition of the multistate model, its relevant transition-specific functions, its parameters, and their uncertainty. It also calculates transition probabilities and cumulative incidences, and thus facilitates analysis of the simulated cohorts.
The \proglang{R} package \pkg{gems} is used for simulation and not parameterization of multistate models. To parameterize the transition-specific hazard functions, the \proglang{R} packages \pkg{survival} \citep{pkg:survival}, \pkg{mstate} \citep{pkg:mstate} and \pkg{muhaz} \citep{pkg:muhaz} can be used. 

% Paper structure
In Section~\ref{tech} we present a mathematical description of the multistate model. We present the simulation from this model and demonstrate the inclusion of parameter uncertainty. In Section~\ref{use}, we describe the use of \pkg{gems} in detail, providing explanations for and examples of all the important package functions. In Section~\ref{cs} we present a case study in cardiology.  Finally, in Section~\ref{conc}, we discuss the strengths and limitations of the package.

%--------------------------------------------------------------------------------
% Technical description
%--------------------------------------------------------------------------------
\section[Technical description]{Technical description of the simulation model}\label{tech}
We describe a directed acyclic multistate model and the algorithm used in \pkg{gems} to simulate from it. For a general introduction to multistate models, see \citet{Putter2007}.

\subsection[Multistate Model]{General setup of the multistate model}\label{msm}
A multistate model consists of a set of states and the transitions between them. The states can be divided into three groups: initial states, intermediate states and absorbing states. \pkg{gems} only considers multistate models without loops, that is models, which can be written  as a directed acyclic graph (DAG) \citep{Pearl2009}. A DAG consists of states and the directed edges that connect them, so that no sequence of directed edges can connect back to a previous state.

Consider a directed acyclic multistate model with $n$ states $E_1, \dots, E_n$, where a transition from state $E_i$ to state $E_j$ is only possible if $i<j$. Let $\left(X_t\right)_{t\geq 0}$ be the stochastic process that describes the progression through the different states. It is an $\mathcal{E} = \{E_1, \dots, E_n\}$-valued jump process with jump times given by
\begin{align} \label{eqn:Si}
  S_i = \inf \left\{ t \geq 0 \where X_t = E_i \right\}
\end{align}
for states $E_i$ that are visited, and $S_i=\infty$ otherwise. Transition times to state $E_j$ from the previous state are defined by $T_j=S_j-S_{\max{\{k \where k<j, S_k<\infty\}}}$, where $S_0=0$ by convention. 

The entire process is determined by transition times $T_j$ to state $E_j$, described by transition-specific hazard functions $h_{ij}$ as 
\begin{align} \label{eqn:Tij}
	T_{ij} &\sim  F_{ij}(t) = 1 - \exp\left\{ -\int_0^t h_{ij}(u) \, du \right\}, \\
	T_j &= \min_{i \in \{1, \dots j-1 \;\vert\; T_i<\infty\}} T_{ij}, % \left\{ T_{ij} \right\} 
\end{align}
where $F_{ij}$ is the cumulative distribution function of the transition time from state $E_i$ to state $E_j$. See Figure~\ref{fig:dag4haz} for a graphical representation of these hazard functions and transition times. Unless all hazards are constant, $X$ does not have a Markovian structure. 

\subsubsection{Hazards and transition probabilities} \label{sec:hazards}

Consider the relatively simple multistate model described in the DAG in Figure~\ref{fig:dag4haz}.
\input{fig/dag4haz}

This exemplary model consists of an initial state $E_1$, two intermediate states $E_2$, $E_3$ and one absorbing state $E_4$. The transition probabilities from state $E_i$ at time $s$ to state $E_j$ at time $t$
\begin{equation} \label{eqn:pij}
	p_{ij}(s,t)=\prob{X_t=E_j \given X_s=E_i}, \hspace{2em} \text{for $s\leq t$}
\end{equation}
can then be calculated from the transition-specific hazard functions as follows. 
 
The probabilities from state $E_4$ are $p_{44}(s,t)=1$ and $p_{4j}(s,t)=0$ for all $j\neq 4$. 

From states $E_2,E_3$, the only two possibilities are to remain in the current state or move to state $E_4$, so the transition probabilities are
\begin{align} \label{eqn:pij_ex23}
	p_{ii}(s,t)&=\exp\left\{-\int_{s-S_i}^{t-S_i} h_{i4}(u) \, du \right\}, &\text{for $i\in\{2,3\}$}, \\
	p_{i4}(s,t)&=1-\exp\left\{-\int_{s-S_i}^{t-S_i} h_{i4}(u) \, du \right\}, &\text{for $i\in\{2,3\}$}, \\
	p_{ij}(s,t)&=0, &\text{for $i\in\{2,3\}$, $j\not\in\{i,4\}$}.
\end{align}

The transition probabilities from the initial state are already difficult to solve analytically. Assuming $S_1=0$, the transition probabilities can be calculated from the integrals
\begin{align} \label{eqn:pij_ex1}
	p_{11}(s,t)&=\exp\left\{-\int_s^t h_{12}(u)\,du -\int_s^t h_{13}(u) \, du -\int_s^t h_{14}(u) \, du\right\}, \\
	p_{12}(s,t)&=\int_s^t p_{11}(s,u)h_{12}(u)p_{22}(u,t) \, du, \\
	p_{13}(s,t)&=\int_s^t p_{11}(s,u)h_{13}(u)p_{33}(u,t) \, du, \\
	p_{14}(s,t)&=1-p_{11}(s,t)-p_{12}(s,t)-p_{13}(s,t) .
\end{align}

Intuitively, these formulas express that the process $X$ remains in state $E_1$ from time $s$ to time $u$. Then it moves to state $E_2$ or $E_3$ respectively, where it remains until time $t$. The transition probabilities $p_{12}$ and $p_{13}$ can then be calculated as the integral over $u$. These integrals become increasingly difficult to solve when there are more states, and they cannot usually be solved analytically. The \pkg{gems} package uses Monte Carlo methods to simulate the transition times associated to those probabilities.

\subsection[Simulation]{Simulating from hazard functions}\label{sim}
In this Section we describe the methods used in the package \pkg{gems} to simulate from a transition-specific hazard function for one agent. For each state $E_i$, all transition-specific hazard functions and their parameters must be specified. For instance, an exponentially distributed transition with mean $\mu=2$ can be specified as a constant function $h(t)=\frac{1}{\mu}$ with parameter $\mu=2$, or equivalently if specifying $h(t)=r$ with parameter $r=\frac{1}{2}$. For the description in this Section, the choice of parameterization is arbitrary, but it will be relevant in Section \ref{unc} where we consider parameter uncertainty.

It is possible to simulate the times $T_{ik}$ from the hazard functions, as explained below. By taking the minimum over all $k$, we get the transition time $T_j$, and the corresponding state $E_j$. To simulate $X$, we therefore start by simulating from the initial state $T_{1k}$ and calculate the first transition time by taking the minimum. Then we continue the simulation from the corresponding state $E_j$. This procedure is iterated until an absorbing state is reached, at which point the simulation ends. 

In order to simulate from a hazard function, we approximate the specified hazard function $h(t)$ by a piecewise constant function $h_{pc}(t)$. Then we use the \code{rpexp} function of the \pkg{msm} package \citep{pkg:msm} to simulate from the piecewise constant approximation of the hazard function $h_{pc}(t)$. The \code{rpexp} function generates random variables from an exponential distribution with piecewise constant rates.

To calculate the transition probabilities from the initial state at time $t=0$, the process $X$ is simulated for $N$ agents (i.e., patients in the context of a cohort). At each time point the proportion of simulated patients that are in any state at that time is calculated. For large enough $N$ these proportions approximate the transition probabilities from the initial state at time $t=0$. 

\subsection[Uncertainty]{Including uncertainty into the multistate model}\label{unc}
The exact parameters of transition-specific hazard functions are often not known. This uncertainty should thus be included in the model's parameter values. Parameters estimated from data are often asymptotically normally distributed for a suitable parameterization. We therefore included parameter uncertainty in the model by sampling the parameters of the transition-specific hazard functions from a multivariate normal distribution. Therefore the transition-specific hazard functions need to be parameterized so that parameters are multivariate normally distributed.

For each simulated patient, all parameters are first drawn from the specified distribution. Then the simulation for this patient is performed, as described in Section~\ref{sim}. This procedure allows the direct inclusion of uncertainty in the estimated parameters into the model, and obtains confidence intervals in the statistical analyses of the hypothetical cohorts. These confidence intervals reflect both sampling and parameter uncertainty. 

In order to include uncertainties in the transition probabilities, the $N$ simulations are split into $M$ groups. Then the above-mentioned proportions for each of these groups is calculated. Finally, the 2.5\% and 97.5\% quantiles are computed to get a 95\% confidence interval for the transition probabilities at each time point. This procedure requires $N$ to be fairly large.

% ----------------------------------------------------------------------
% Initialise R session for this section
<<preliminaries,echo=FALSE,results=hide>>=
remove(list=ls())
options(width=80,show.signif.stars=FALSE,prompt="R> ")
set.seed(123)
@

%--------------------------------------------------------------------------------
% Using the package
%--------------------------------------------------------------------------------
\section[Using the package]{Using \pkg{gems}}\label{use}
In this section we illustrate how to use \pkg{gems} \citep{pkg:gems}. Figure~\ref{fig:flow} shows a flowchart of the steps to take to use \pkg{gems} and indicates where these steps are described in detail. First, Section~\ref{spec} shows how to specify all the necessary input (number of states, hazard functions and parameters) to run a simulation. Then Section~\ref{usesim} shows how to simulate from this input. Section~\ref{subsec:unc} describes how to include parameter covariances in the model and Section~\ref{subsec:bl} shows how to add baseline covariates. Finally Section~\ref{subsec:hist} describes how to include history dependence in the hazard functions and Section~\ref{subsec:ttt} describes an alternative to using hazard functions for specifying the transitions. 

\input{fig/flow.tex}

The package is available at CRAN and can be loaded by

<<load,echo=TRUE,eval=TRUE,results=hide>>=
require("gems")
@

The package \pkg{gems} uses three classes to encode all model inputs and outputs.
\begin{enumerate}
  \item A \code{transition.structure} contains the number of model states and a \code{matrix} with elements that are used to specify transition-specific hazard functions, their parameters and covariances. 
  \item An \code{ArtCohort} contains all aspects of the simulated cohort, including the model input and a \code{data.frame} with the entry times for each patient into each of the states. 
  \item The \code{PosteriorProbabilities} contain the transition probabilities or cumulative incidence that can be calculated from the \code{ArtCohort}.
\end{enumerate}

The model has six main functions. The first three are used to specify the model, the fourth is used for simulation and the last two are used to summarize the results. 
\begin{enumerate}
  \item \code{generateHazardMatrix} creates a template of class
    \code{transition.structure} that can be used to specify the transition-specific hazard functions. 
  \item \code{generateParameterMatrix} creates a template of class \code{transition.structure} that can be used to specify the parameters.
  \item \code{generateParameterCovarianceMatrix} creates a \code{transition.structure} that can be used to specify the parameter covariance. 
  \item \code{simulateCohort} simulates the specified artificial cohort and returns an object of class \code{ArtCohort}.
  \item \code{transitionProbabilities} returns an object of class
    \code{posteriorProbabilities} that contains the transition probabilities from the initial state over time.
  \item \code{cumulativeIncidence} returns an object of class
    \code{posteriorProbabilities} that contains the cumulative incidence over time.
\end{enumerate}

\subsection[Model specification]{Specifying the model}\label{spec}

Suppose we want to simulate a disease with initial state $E_1$, intermediate state $E_2$ and absorbing state $E_3$ as depicted in the DAG in Figure~\ref{fig:specDAG}.
\input{fig/specDAG}
In order to fully specify the model, the hazard functions, their parameters and the covariance structure of these parameters must be specified. The hazard functions are specified in a \code{transition.structure} of dimension $states \times states$. 

The function \code{generateHazardMatrix} can be used to specify such a \code{transition.structure} that contains only the model structure. 
<<genHaz,echo=TRUE,eval=TRUE,results=verbatim>>=
  hf <- generateHazardMatrix(3)
  print(hf)
@
The argument \code{statesNumber} specifies the number of states in the multistate model. The resulting \code{transition.structure} only provides the basic structure for how hazard functions are specified and the desired hazard functions must be entered. 

For exponential, Weibull and Weibull mixture distributions, the built-in functions can be specified as \code{"Exponential"}, \code{"Weibull"}, and \code{"multWeibull"} respectively. Arbitrary continuous hazards can also be specified as functions. 

For instance, assume that the transition times $T_{12}$ and $T_{13}$ are exponentially distributed and the transition time $T_{23}$ is Weibull distributed. Then the \code{transition.structure} can be set up using double square brackets as follows. 
To show different ways of specifying time-to-event distributions, we used a user-supplied function for $T_{12}$ and a built-in function for $T_{13}$, even though they are both exponentially distributed. 
For the first transition, the hazard function of an exponential is specified as a hazard function with its own parameterization. The parameterization of the built-in functions is explained below. Note that user-supplied functions need to return a result of the same length as the time argument $t$. The required code to specify the hazard functions described above is
<<genHaz,echo=TRUE,eval=TRUE,results=verbatim>>=
  hf[[1, 2]] <- function(t, mu) rep(1 / mu, length(t))
  hf[[1, 3]] <- "Exponential"
  hf[[2, 3]] <- "Weibull"
  print(hf)
@
When specifying a function as \code{"Exponential"} or \code{"Weibull"}, the parameterization is the same as in the \code{rexp} or \code{rweibull} function; that is,
\begin{align} \label{eqn:ExpWeib_param}
  h_{exp}(t, rate) &= rate, \\
  h_{Weibull}(t, shape, scale) &= \frac{shape}{scale} \left( \frac{t}{scale} \right)^{shape-1}. 
\end{align}
For the Weibull mixture model, the parameterization is
\begin{align} \label{eqn:MultWeib_param}
  h_{multWeibull}(t, \bm\omega, \mathbf{k}, \bm\lambda) = 
    \frac{\omega_1 f_W(t, k_1,  \lambda_1) + \dots + \omega_n f_W(t, k_n, \lambda_n)}
    {\omega_1 (1-F_W(t, k_1, \lambda_1)) + \dots + \omega_n (1-F_W(t, k_n, \lambda_n))}, 
\end{align}
where $f_W$ and $F_W$ are the Weibull density and distribution functions in the same parameterization as before, where $k_i$ is the shape and $\lambda_i$ the scale of the $i$-th Weibull distribution. Here $\mathbf{k}$ and $\bm\lambda$ are $n$-dimensional vectors and $\bm\omega$ is an $(n-1)$ dimensional vector with $\omega_n = 1-\sum_{i=1}^{n-1} \omega_i$ being defined automatically. Mixed Weibull distributions can be used when there are multiple modes of failure that result in the same state and can be estimated using maximum likelihood or non-linear least squares methods \citep{Ling2009}.

Specifying built-in functions is more efficient than specifying the hazard function of a Weibull distribution, because the simulation internally uses \code{rweibull} instead of using piecewise approximation of the Weibull hazard function and \code{rpexp} to generate Weibull distributed random numbers. 

Once all hazard functions are suitably specified, the parameter values must be determined. The easiest way to do this is by using the function \code{generateParameterMatrix}, with the hazard structure \code{hf} as an argument,
<<genPar,echo=TRUE,eval=TRUE,results=verbatim>>=
  par <- generateParameterMatrix(hf)
  par[[1, 2]] <- list(mu = 3.1)
  par[[1, 3]] <- list(rate = 0.3)
  par[[2, 3]] <- list(shape = 3, scale = 3)
@
The \code{transition.structure} generated by \code{generateParameterMatrix} is again only a framework; the specific parameter values need to be assigned afterwards. Note that the parameters need to be specified in the order in which they appear in the function. 
%Names like shape and scale in the list are not meant to match with the internal definitions for Weibull associated functions, but we recommend its use for more convenience. 

\subsection[Simulation]{Simulation and post-processing}\label{usesim}

Once the model is specified, the simulation can be invoked with the \code{simulateCohort} function. The arguments for \code{simulateCohort} are the previously specified \code{transitionFunction}, \code{parameters}, as well as the number of patients \code{cohortSize} to be simulated and the final time \code{to} of the simulation.
<<simCoh,echo=TRUE,eval=TRUE,results=verbatim>>=
  cohortSize <- 10000
  cohort <- simulateCohort(transitionFunctions = hf, 
                           parameters = par, 
                           cohortSize = cohortSize, 
                           to = 10)
  head(cohort)
@
The output \code{ArtCohort} contains the entry time into the different states for each patient. 

Next, we can calculate and plot the transition probabilities and cumulative incidence including $95\%$ confidence intervals from the initial state using the functions \code{transitionProbabilities} and \code{cumulativeIncidence} respectively.
<<postProb,include=FALSE>>=
  post <- transitionProbabilities(cohort, times = seq(0,5, .1))
  cinc <- cumulativeIncidence(cohort, times = seq(0,5, .1))
  head(post)
  head(cinc)
@
<<postPlot,include=FALSE>>=
  plot(post, main = "Transition probabilities", ci = TRUE)
@
<<cincPlot,include=FALSE>>=
  plot(cinc, main = "Cumulative incidence", ci = TRUE)
@

For the \code{transitionProbabilities} function, the argument \code{times} specifies the timepoints at which the transition probabilities should be returned. The \code{plot} function admits the argument \code{ci} in order to add confidence intervals to the figure. Figure~\ref{fig:postProb} shows the transition probabilities and Figure~\ref{fig:cincProb} shows the cumulative incidence in the above example. 

\begin{figure} 
\begin{center}
<<label=postPlot,fig=TRUE,echo=FALSE>>=
<<postPlot>>
@
\end{center}
\caption{Transition probabilities.}
\label{fig:postProb}
\end{figure}

\begin{figure} 
\begin{center}
<<label=cincPlot,fig=TRUE,echo=FALSE>>=
<<cincPlot>>
@
\end{center}
\caption{Cumulative incidence.}
\label{fig:cincProb}
\end{figure}

\subsection{Parameter uncertainty}\label{subsec:unc}
Suppose that we want to include parameter uncertainty in the above example. For instance, we estimate the shape and scale parameters for the transition from $E_2$ to $E_3$ be distributed as follows:
\begin{align} \label{eqn:unc}
  \begin{pmatrix}
    shape \\ scale 
  \end{pmatrix}
  \sim
  \mathcal{MN}\left( 
    \begin{pmatrix}
      3 \\ 3 
    \end{pmatrix}
    ,
    \begin{pmatrix}
      0.5 & 0 \\ 0 & 0.5
    \end{pmatrix}
  \right) .
\end{align}

Then the covariance matrix can be specified using the \code{generateParameterCovarianceMatrix} function with the previously generated parameter \code{transition.structure} as an argument.
<<genCov,echo=TRUE,eval=TRUE,results=verbatim>>=
  cov <- generateParameterCovarianceMatrix(par)
  cov[[2, 3]] <- diag(.5, 2)
@
As with the parameter \code{transition.structure}, also the values of the parameter covariance \code{transition.structure} need to be specified after generating the \code{transition.structure}. 

For the simulation, the uncertainty is included in the \code{parameterCovariance} argument for \code{simulateCohort} as follow:
<<cohortSize,echo=FALSE,eval=TRUE,results=hide>>=
  cohortSize <- 10
@
<<simCohUnc,echo=TRUE,eval=TRUE,results=verbatim>>=
  cohort <- simulateCohort(transitionFunctions = hf, 
                           parameters = par, 
                           parameterCovariances = cov,
                           cohortSize = cohortSize, 
                           to = 10)
@


\subsection{Baseline characteristics}\label{subsec:bl}
Baseline characteristics can be included in the model by letting the hazard depend on the argument \code{baseline}; for example, if age and sex are important characteristics. 
Consider sex  to be encoded as $0$ for males and as $1$ for females, and let the baseline age be the age in years. Suppose we want to simulate a cohort of $50\%$ men and $50\%$ women with ages distributed uniformly between 20 and 50. Baseline characteristics should be specified in a \code{matrix} or \code{data.frame} as follows.
<<blDef,echo=TRUE,eval=TRUE,results=verbatim>>=
  bl <- data.frame(sex = rbinom(cohortSize, 1, .5), 
                   age = runif(cohortSize, 20, 50))
  head(bl)
@

If there is a sex-specific rate, one option would be to record it as a \code{numeric} of \code{length} $2$, with the first position describing the rate for male and the second position the rate for women. Suppose age is another risk factor, specified as a rate ratio per year. In this case the function would depend on the sex-specific rate \code{rate}, the rate ratio  \code{rr} per year of age and the baseline characteristics \code{bl}. The model could then be specified as follows. 
<<bl,echo=TRUE,eval=TRUE,results=verbatim>>=
  hf[[1, 2]] <- function(t, bl, rate, rr) {
    rep(rate[bl["sex"] + 1], length(t)) * rr ^ (bl["age"] - 20)
  }
  par[[1, 2]] <- list(rate = c(0.2,0.3), rr = 1.02)
  cov[[1, 2]] <- diag(0, 3)
@

In order to simulate from this model that includes baseline characteristics, an additional argument \code{baseline} is added to the \code{simulateCohort} function as follows. 
<<simCohBL,echo=TRUE,eval=TRUE,results=verbatim>>=
  cohort <- simulateCohort(transitionFunctions = hf, 
                           parameters = par, 
                           cohortSize = cohortSize, 
                           parameterCovariances = cov, 
                           baseline = bl,
                           to = 5)
@


\subsection{History dependence}\label{subsec:hist}
In many real-world applications, transitions between states may depend both on the current state, and on the history of previous events in the patient history. For instance, in an HIV treatment model, the immune system worsens between failure of first-line therapy and start of second-line treatment and the mortality hazard after starting a second-line therapy depends on how long a person spent on failing first-line treatment \citep{Gazzola2009}.

History-dependence of the model can be specified by letting the hazard function depend on the argument \code{history}. 
This \code{history}-argument is a vector indexed by the transition-number
<<transNr,echo=TRUE,eval=TRUE,results=verbatim>>=
  gems:::auxcounter(3)
@
and is the transition time $T_i$ for the transitions that have occurred. For transitions that have not yet occurred, the \code{history} argument is $0$. 

The \code{history} argument allows to use the clock-forward approach (time refers to the time since the patient entered the initial state)  instead of the clock-reset approach (time refers to time since entry into current state) to multistate modeling \citep{Putter2007}. To use the clock-forward approach, \code{t} can be replaced by \code{t + sum(history)}. 
Note that the clock-forward approach does not support built-in function (\code{"Exponential"}, \code{"Weibull"} and \code{"multWeibull"}) and users have to supply their own functions. 
If the transition-specific hazard for transition $3$ was estimated using the clock-forward approach instead of the clock-reset approach, the Weibull function could be specified as follows.
<<hist,echo=TRUE,eval=TRUE,results=verbatim>>=
  hf[[2, 3]] <- function(t, shape, scale, history) {
    shape/scale * ((t + sum(history)) / scale) ^ (shape - 1)  
  }
@
The \code{simulateCohort} function can be used with this new function just as it was before. 


\subsection{Time to transition functions}\label{subsec:ttt}
Sometimes it is easier not to specify transitions via their hazards, but to directly specify the time it takes until the transition occurs. For instance, in some cases test results need to be confirmed by a second test three months later (e.g., HIV treatment failure tests \citep{Estill2012}). Then the time would be three months and the hazard function would be a function with infinite point mass in 3. An additional argument \code{timeToTransition} to the \code{simulateCohort} function would have to be given by a \code{matrix}; the position of this kind of transition would be \code{TRUE} and the rest (usual hazard functions) would be \code{FALSE}. This procedure and the specification of the \code{transitionFunction} is as follows:
<<timeTo,echo=TRUE,eval=TRUE,results=verbatim>>=
  hf[[1, 3]] <- function() 3
  par[[1, 3]] <- list()
  ttt <- matrix(FALSE, nrow = 3, ncol = 3)
  ttt[1, 3] <- TRUE
  cohort <- simulateCohort(transitionFunctions = hf, 
                           parameters = par, 
                           cohortSize = cohortSize, 
                           parameterCovariances = cov, 
                           timeToTransition = ttt,
                           baseline = bl,
                           to = 5)
@


% ----------------------------------------------------------------------
% Initialise R session for this section
<<preliminaries,echo=FALSE,results=verbatim>>=
remove(list=ls())
options(width=80,show.signif.stars=FALSE,prompt="R> ")
pkgs2load <- c("gems", "mstate", "msm", "muhaz")
invisible(sapply(pkgs2load, require, character.only=TRUE))
set.seed(123)
@

% ----------------------------------------------------------------------
\section[Case study]{Case study: Transcatheter aortic valve implantation}\label{cs}

\subsection{Introduction}
Calcific aortic stenosis is a degenerative disease characterized by progressive narrowing of the aortic valve, which compromises oxygenated blood output from the heart. Medical therapy as a sole treatment option has not improved survival among patients with symptomatic severe aortic stenosis. Surgical aortic valve replacement (SAVR) is the treatment of choice and the gold standard for aortic valve disease treatment. In the presence of serious co-morbidities, and in patients considered to be at high-risk for SAVR, transcatheter aortic valve implantation (TAVI) techniques offer less-invasive treatment of valvular aortic stenosis.  Older patients who have severe calcific aortic stenosis, characterized by the presence of co-morbidities and compromised left ventricular ejection fraction, have increased risk of complications from the surgical procedure itself. These high risk patients were managed medically until catheter-based treatment TAVI was introduced in 2002. During a TAVI implantation a bio-prosthetic valve is inserted and implanted within the diseased aortic valve through a catheter. The result of increased interest in this catheter-based approach is that this less invasive procedure is now used in patients with less severe disease \citep{Pilgrim2012}.

\subsection{Statistical analysis}

The \code{tavi} data set contains data on kidney injuries, bleeding complications and the combined endpoint of stroke or death for 194 patients. The variables \code{kidney, bleeding, death} are indicator variables that show if an event has occurred; the variables \code{kidney.dur, bleeding.dur, death.dur} are the times at which the events occurred or the patients were censored. 
<<data,echo=TRUE,eval=TRUE,results=verbatim>>=
  data("tavi")
  head(tavi)
@

In the following discussion, the DAG depicted in Figure~\ref{fig:taviDAG} is assumed. Since no patients experience both kidney injury and bleeding complications, we assume these events to be mutually exclusive.
\input{fig/taviDAG}

We then create the transition matrix using the \pkg{mstate} package. According to the DAG the transition matrix is given by
<<tmat,echo=TRUE,eval=TRUE,results=verbatim>>=
  tmat <- transMat(x = list(c(2, 3, 4), c(4), c(4), c()), 
                 names = c("TAVI", 
                           "Kidney Injury", 
                           "Bleeding", 
                           "Stroke/Death"))
  tmat
@

In order to estimate the transition-specific hazard functions, we prepare the data using the \pkg{mstate} package. We use \code{msprep} to get the data into long format, and \code{split} to split the data according to the transition. 
<<mstavi,echo=TRUE,eval=TRUE,results=verbatim>>=
  mstavi <- msprep(data = tavi, trans = tmat, 
                 time = c(NA, "kidney.dur", "bleeding.dur", "death.dur"),
                 status = c(NA, "kidney", "bleeding",  "death"))
  head(mstavi)
  mstavi$time[mstavi$time == 0] <- .Machine$double.eps
  msplit <- split(mstavi, mstavi$trans)
  head(msplit[[5]])
@

As a first step we fit an exponential distribution to all transition times. For each transition, we estimate the rate and the variance. 
<<msexp, echo=TRUE, eval=TRUE, results=verbatim>>=
  exp.fit <- sapply(msplit, function(x) 
    summary(survreg(Surv(time, status) ~ 1, 
                    data = x, 
                    dist = "exponential")))
  exp.coef <- unlist(exp.fit["coefficients", ])
  exp.var <- unlist(exp.fit["var", ])
@

Next we specify the model, simulate from it and compare the simulated mortality to a Kaplan-Meier graph of mortality.
<<sim.exp, echo=TRUE, eval=TRUE, results=verbatim>>=
  states <- 4
  maxtime <- max(mstavi$time)
  ind <- which(!is.na(tmat), arr.ind = TRUE)

  hm <- generateHazardMatrix(states)
  for (i in 1:dim(ind)[1]){
    hm[[ind[i, 1], ind[i, 2]]] <- "Weibull"
  }
  
  par <- generateParameterMatrix(hm)
  for (i in 1:dim(ind)[1]){
    par[[ind[i, 1], ind[i, 2]]] <- list(shape = 1, 
                                        scale = exp(exp.coef[i]))
  }
  
  cov <- generateParameterCovarianceMatrix(par)
  for (i in 1:dim(ind)[1]){
    cov[[ind[i, 1], ind[i, 2]]] <- matrix(c(0, 0, 0, exp.var[i]), nrow=2)
  }
  
  ds <- simulateCohort(transitionFunctions = hm, 
                      parameters = par, 
                      cohortSize = 100  * nrow(tavi), 
                      parameterCovariances = cov,
                      to = maxtime)
  cinc <- cumulativeIncidence(ds, 0:maxtime, colnames(tmat), M = 100)
@

Figure~\ref{fig:PWexpPlot} shows the overall mortality from the simulated cohort. 
Because the purpose of this study is to illustrate the use and flexibility of the package, we split time into monthly intervals and calculate piecewise constant hazard functions using the \code{pehaz} function from the \pkg{muhaz} package. 
%If the aim was to study TAVI in more detail,  we would instead consider each transition separately, and fit an appropriate parametric distribution.

<<pexpStats, echo=TRUE, eval=TRUE, results=hide>>=
  timeStep <- 30
  pwexp <- sapply(msplit, function(x) pehaz(x$time,
                                            x$status,
                                            width = timeStep, 
                                            min.time = 0,
                                            max.time = max(mstavi$time)))
  cuts <- pwexp["Cuts", ]
  pwhazard <- pwexp["Hazard", ]
@

We parameterize the hazard functions with piecewise constant hazards and simulate again.
<<pexpSim, echo=TRUE, eval=TRUE, results=verbatim>>=
  hm2 <- generateHazardMatrix(states)
  for (i in 1:dim(ind)[1]){
    hm2[[ind[i, 1], ind[i, 2]]] <- function(t, rates) {
      rates[t / timeStep + 1]
    }
  }
  par2 <- generateParameterMatrix(hm2)
  for (i in 1:dim(ind)[1]){
    par2[[ind[i, 1], ind[i, 2]]] <- list(rates = pwhazard[[i]])
  }
  ds2 <- simulateCohort(transitionFunctions = hm2, 
                        parameters = par2, 
                        cohortSize = 100  * nrow(tavi), 
                        to = maxtime)
  cinc2 <- cumulativeIncidence(ds2, 0:maxtime, colnames(tmat), M = 100)
@

The plot function also admits an argument \code{states}, which can be used in order to only \code{plot} certain states as shown in the following example. 
<<PWexpPlot,include=FALSE>>=
  plot(cinc, states = 4, axes = FALSE, frame = TRUE, col = 2, 
       xlab = "Time (in months)", main = "Mortality", ci = TRUE)
  lines(survfit(Surv(death.dur, death) ~ 1, data = tavi), 
        fun = "event", lwd = 2)
  lines(survfit( Surv(death.dur, death)~1, data=tavi), 
        fun="event", lwd=2, conf.int=TRUE, lty=2)
  par(new = TRUE)
  plot(cinc2, states = 4, axes = FALSE, frame = TRUE, col = 3, 
       xlab = "", main = "", ci = TRUE)
  axis(2); axis(4)
  axis(1, at = (0:13*90)[0:6*2+1], labels = (0:13*3)[0:6*2+1])
  legend(200, .8, c("Data", 
                    "Simulation: exponential", 
                    "Simulation: piecewise exponential"), 
         lty = 1, col = c(1:3), lwd = 2)
@

\begin{figure}
\begin{center}
<<label=PWexpPlot,fig=TRUE,echo=FALSE>>=
<<PWexpPlot>>
@
\end{center}
\caption{Cumulative incidence with constant and piecewise constant transition-specific hazard functions.}
\label{fig:PWexpPlot}
\end{figure}

%The second simulation fits the data well as shown in Figure~\ref{fig:PWexpPlot}. 
%A different parametric survival function could also be used, but since we intend to demonstrate the advantages of the package \pkg{gems}, we will not elaborate on this. 
Figure~\ref{fig:PWexpPlot} shows how the simulated cumulative incidence depends on the statistical model. The package \pkg{gems} admits the choice of any transition-specific hazard function. 
We will now use the second model with piecewise constant hazard functions to estimate the effect of an intervention on mortality.
%We are now satisfied with the fit and use the model to estimate the effect of an intervention.

\subsection{Intervention modeling}
Suppose there is a new intervention that dramatically reduces the probability of getting bleeding complications, and we are interested in the impact of this intervention on mortality. 
For simplicity, we assume that the intervention reduces the transition-specific hazard of bleeding complications by $80\%$. Then 
<<hazardIntervene, echo=TRUE, eval=TRUE, results=verbatim>>=
  hm3 <- hm2
  par3 <- par2
  par3[[1, 3]]$rates <- par3[[1, 3]]$rates / 5
  ds3 <- simulateCohort(transitionFunctions = hm3, 
                        parameters = par3, 
                        cohortSize = 100  * nrow(tavi), 
                        to = maxtime)
  cinc3 <- cumulativeIncidence(ds3, 0:maxtime, colnames(tmat), M = 100)
@

<<InterPlot,include=FALSE>>=
  plot(cinc2, states = 4, axes = FALSE, frame = TRUE, col = 1, ci = TRUE, 
       xlab = "Time (in months)", main = "Mortality")
  par(new = TRUE)
  plot(cinc3, states = 4, axes = FALSE, frame = TRUE, col = 2, ci = TRUE, 
       xlab = "", main = "")
  axis(2); axis(4)
  axis(1, at = (0:13 * 90)[0:6*2 + 1], labels = (0:13 * 3)[0:6 * 2 + 1])
  legend(200, .8, c("No intervention", "Intervention"), 
         lty = 1, col = 1:2, lwd = 2)
@

\begin{figure}
\begin{center}
<<label=InterPlot,fig=TRUE,echo=FALSE>>=
<<InterPlot>>
@
\end{center}
\caption{Effect of reducing bleeding complications on mortality.}
\label{fig:InterPlot}
\end{figure}

<<calcs, echo=FALSE, eval=TRUE, results=hide>>=
  xx <- cinc2@probabilities[nrow(cinc2@probabilities), ncol(cinc2@probabilities)]
  yy <- cinc3@probabilities[nrow(cinc3@probabilities), ncol(cinc3@probabilities)]
  signifs <- 1
  c1 <- round(xx * 100, signifs)
  c2 <- round(yy * 100, signifs)
  c3 <- round((xx - yy) / xx* 100, signifs)
@

Figure~\ref{fig:InterPlot} shows that reducing bleeding complications by $80\%$ decreases three-year mortality by $\Sexpr{c3}\%$ from $\Sexpr{c1}\%$ to $\Sexpr{c2}\%$.

%--------------------------------------------------------------------------------
% Conclusion
%--------------------------------------------------------------------------------
\section{Conclusion} \label{conc}
In this paper we have presented the \proglang{R} package \pkg{gems}, which allows simulation from a directed acyclic multistate model. The \proglang{R} package \pkg{gems} is a flexible tool for investigating and evaluating health interventions. We have given detailed examples of the use of each function of \pkg{gems}, and an example of its use to evaluate the effect of reduced bleeding complications in TAVI patients on mortality. 

Several packages estimate and simulate Markov models, but we are not aware of any other packages that allow simulation from a multistate model with arbitrary transition-specific hazard functions. This flexibility in hazard functions improves its fit to data and allows to more accurately estimate the effects of different interventions. This package's inclusion of history-dependent transitions is also a major improvement on many traditional model structures. 

The \pkg{gems} package has some limitations, including the fact that a DAG is required. Sometimes it is useful to have models in which patients can return to a previous state. If this feature is not frequently required, the problem can be resolved by repeating the state in a DAG. Otherwise a different model structure is needed. A further limitation is that higher flexibility requires more intensive computation, compared to traditional models. Longitudinal processes could be incorporated in a joint model, and evaluations of the artificial cohorts could be further automated in future expansions. 

The \pkg{gems} package has useful functions for simulating hypothetical cohorts of patients based on a multistate model with general transition-specific hazard functions, and is a flexible and user-friendly tool for planning and evaluating public-health interventions.


\section*{Acknowledgments}

We would like to thank the Swiss Cardiovascular Center Bern at the 
Bern University Hospital (S.~Windecker, B.~Meier, P.~Wenaweser, T.~Pilgrim, S.~Stortecky, L.~Buellesfeld) for providing data on transcatheter aortic valve implantation for the case study. 
We also thank K.~Tal for her editorial assistance.
This study was supported by UNITAID; a PROSPER fellowship to O.~Keiser and a PRODOC PhD grant for N.~Blaser from the Swiss National Science Foundation.

%\bibliographystyle{jss}
\bibliography{lib/myrefs}

\end{document}
